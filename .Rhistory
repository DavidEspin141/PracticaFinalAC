mean(credit$V2)
median(credit$V2)
#Representamos histograma
myhist = ggplot(data=credit,aes(V2)) +
geom_histogram(col="orange",fill="orange",alpha=0.2,) +
labs(title="Histograma V2", y="Count")
#Marca el valor de la media con una línea azul vertical
myhist = myhist + geom_vline(xintercept = mean(credit$V2),
col="blue")
#Marca el valor de la mediana con una línea roja
myhist = myhist + geom_vline(xintercept = median(credit$V2),
col="red")
dens<-density(credit$V2,na.rm=T)
myhist+dens
#Representamos histograma
myhist = ggplot(data=credit,aes(V2)) +
geom_histogram(col="orange",fill="orange",alpha=0.2,) +
labs(title="Histograma V2", y="Count")
#Marca el valor de la media con una línea azul vertical
myhist = myhist + geom_vline(xintercept = mean(credit$V2),
col="blue")
#Marca el valor de la mediana con una línea roja
myhist = myhist + geom_vline(xintercept = median(credit$V2),
col="red")
dens<-density(credit$V2)
myhist+dens
mean(credit$V2)
median(credit$V2)
#Representamos histograma
myhist = ggplot(data=credit,aes(V2)) +
geom_histogram(col="orange",fill="orange",alpha=0.2,) +
labs(title="Histograma V2", y="Count")
#Marca el valor de la media con una línea azul vertical
myhist = myhist + geom_vline(xintercept = mean(credit$V2),
col="blue")
#Marca el valor de la mediana con una línea roja
myhist = myhist + geom_vline(xintercept = median(credit$V2),
col="red")
dens<-density(credit$V2,na.rm=T)
myhist
dens
#Representamos histograma
myhist = ggplot(data=credit,aes(V2)) +
geom_histogram(col="orange",fill="orange",alpha=0.2,) +
labs(title="Histograma V2", y="Count")
#Marca el valor de la media con una línea azul vertical
myhist = myhist + geom_vline(xintercept = mean(credit$V2),
col="blue")
#Marca el valor de la mediana con una línea roja
myhist = myhist + geom_vline(xintercept = median(credit$V2),
col="red")
myhist+geom_rug(data=credit,aes(x=V2,y=0),
sides="b",position="jitter")
dens
summary(credit$V3)
#Representamos histograma
myhist = ggplot(data=credit,aes(V2)) +
geom_histogram(col="orange",fill="orange",alpha=0.2,) +
labs(title="Histograma V2", y="Count")
#Marca el valor de la media con una línea azul vertical
myhist = myhist + geom_vline(xintercept = mean(credit$V2),
col="blue")
#Marca el valor de la mediana con una línea roja
myhist = myhist + geom_vline(xintercept = median(credit$V2),
col="red")
myhist+geom_rug(data=credit,aes(x=V2,y=0),
sides="b",position="jitter")
#Representamos histograma
myhist = ggplot(data=credit,aes(V3)) +
geom_histogram(col="orange",fill="orange",alpha=0.2,) +
labs(title="Histograma V3", y="Count")
#Marca el valor de la media con una línea azul vertical
myhist = myhist + geom_vline(xintercept = mean(credit$V3),
col="blue")
#Marca el valor de la mediana con una línea roja
myhist = myhist + geom_vline(xintercept = median(credit$V3),
col="red")
myhist+geom_rug(data=credit,aes(x=V3,y=0),
sides="b",position="jitter")
cor(credit[, c("V2", "V3", "V8", "V11", "V14", "V15")])
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V1))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V14))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V5))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V6))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V7))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V9))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V10))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V12))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V13))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V16))
cor(credit[, c("V2", "V3", "V8", "V11", "V14", "V15")])
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V1))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V4))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V5))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V6))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V7))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V9))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V10))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V12))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V13))
pairs(credit[,c("V2","V3","V8","V11","V14","V15")],col=as.numeric(credit$V16))
credit<- read.csv("credit+approval/crx.data", header=FALSE)
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
str(credit)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
str(credit)
library(gridExtra)
library(ggplot2)
g1<-ggplot(na.omit(credit), aes(x = "", y = V2)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
g2<-ggplot(na.omit(credit), aes(x = "", y = V3)) +
geom_boxplot() +
labs(y = "V3", x = "") +
theme_minimal()
g3<-ggplot(na.omit(credit), aes(x = "", y = V8)) +
geom_boxplot() +
labs(y = "V8", x = "") +
theme_minimal()
g4<-ggplot(na.omit(credit), aes(x = "", y = V11)) +
geom_boxplot() +
labs(y = "V11", x = "") +
theme_minimal()
g5<-ggplot(na.omit(credit), aes(x = "", y = V14)) +
geom_boxplot() +
labs(y = "V14", x = "") +
theme_minimal()
g6<-ggplot(na.omit(credit), aes(x = "", y = V15)) +
geom_boxplot() +
labs(y = "V15", x = "") +
theme_minimal()
grid.arrange(g1,g2,g3,g4,ncol=2)
grid.arrange(g5,g6)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
setwd("~/Escritorio/RepositorioAC/PracticaFinalAC")
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
str(credit)
levels(credit$V4)<-c(levels(credit$V4),"t")
str(credit$V4)
moda <- function(x) {
names(which.max(table(x, useNA = "no")))
}
credit$V1[is.na(credit$V1)] <- moda(credit$V1)
credit$V4[is.na(credit$V4)] <- moda(credit$V4)
credit$V5[is.na(credit$V5)] <- moda(credit$V5)
credit$V6[is.na(credit$V6)] <- moda(credit$V6)
credit$V7[is.na(credit$V7)] <- moda(credit$V7)
View(credit.Datos.Train)
View(credit.Datos.Test)
View(credit.trainIdx)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
for(cat in categoricos_col){
credit.Datos.Train[[cat]] = factor(
credit.Datos.Train[[cat]],
levels = unique(credit.Datos.Train[[cat()]])
)
}
for(cat in categoricos_col){
credit.Datos.Train[[cat]] = factor(
credit.Datos.Train[[cat]],
levels = unique(credit.Datos.Train[[cat()]])
)
}
rf_model <- train(
credit.varSalida ~ .,  # fórmula: la variable objetivo (resultado) y todos los predictores
data = credit.Datos.Train,  # conjunto de datos de entrenamiento
method = "rf",  # especificamos el modelo Random Forest
trControl = trainControl(method = "cv", number = 10),  # 10-fold cross-validation
importance = TRUE  # Para calcular la importancia de las variables
)
library(caret)
library(randomForest)
install(randomForest)
install.packages(randomForest)
install.packages("randomForest")
library(caret)
library(randomForest)
rf_model <- train(
credit.varSalida ~ .,  # fórmula: la variable objetivo (resultado) y todos los predictores
data = credit.Datos.Train,  # conjunto de datos de entrenamiento
method = "rf",  # especificamos el modelo Random Forest
trControl = trainControl(method = "cv", number = 10),  # 10-fold cross-validation
importance = TRUE  # Para calcular la importancia de las variables
)
A continuación vamos a aplicar random forest tal cual se encuentra actualmente el data.frame:
for(cat in categoricos_col){
credit.Datos.Train[[cat]] = factor(
credit.Datos.Train[[cat]],
levels = unique(credit.Datos.Train[[cat()]])
)
}
rf_model <- train(
credit.varSalida ~ .,  # fórmula: la variable objetivo (resultado) y todos los predictores
data = credit.Datos.Train,  # conjunto de datos de entrenamiento
method = "rf",  # especificamos el modelo Random Forest
trControl = trainControl(method = "cv", number = 10),  # 10-fold cross-validation
importance = TRUE  # Para calcular la importancia de las variables
)
summary(credit)
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
str(credit)
levels(credit$V4)<-c(levels(credit$V4),"t")
str(credit$V4)
moda <- function(x) {
names(which.max(table(x, useNA = "no")))
}
credit$V1[is.na(credit$V1)] <- moda(credit$V1)
credit$V4[is.na(credit$V4)] <- moda(credit$V4)
credit$V5[is.na(credit$V5)] <- moda(credit$V5)
credit$V6[is.na(credit$V6)] <- moda(credit$V6)
credit$V7[is.na(credit$V7)] <- moda(credit$V7)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.modelo.rf = train(credit.Datos.Train[credit.varsEntrada],
credit.Datos.Train[[credit.varSalida]],
method='rf')
warnings()
summary(credit)
# Función para calcular la moda
moda <- function(x) {
names(which.max(table(x, useNA = "no")))
}
credit$V1[is.na(credit$V1)] <- moda(credit$V1)
credit$V4[is.na(credit$V4)] <- moda(credit$V4)
credit$V5[is.na(credit$V5)] <- moda(credit$V5)
credit$V6[is.na(credit$V6)] <- moda(credit$V6)
credit$V7[is.na(credit$V7)] <- moda(credit$V7)
summary(credit)
rf_model <- train(
credit.varSalida ~ .,  # fórmula: la variable objetivo (resultado) y todos los predictores
data = credit.Datos.Train,  # conjunto de datos de entrenamiento
method = "rf",  # especificamos el modelo Random Forest
trControl = trainControl(method = "cv", number = 10),  # 10-fold cross-validation
importance = TRUE  # Para calcular la importancia de las variables
)
summary(credit)
credit$V1[is.na(credit$V1)] <- moda(credit$V1)
credit$V4[is.na(credit$V4)] <- moda(credit$V4)
credit$V5[is.na(credit$V5)] <- moda(credit$V5)
credit$V6[is.na(credit$V6)] <- moda(credit$V6)
credit$V7[is.na(credit$V7)] <- moda(credit$V7)
summary(credit)
moda <- function(x) {
names(which.max(table(x, useNA = "no")))
}
credit$V1[is.na(credit$V1)] <- moda(credit$V1)
credit$V4[is.na(credit$V4)] <- moda(credit$V4)
credit$V5[is.na(credit$V5)] <- moda(credit$V5)
credit$V6[is.na(credit$V6)] <- moda(credit$V6)
credit$V7[is.na(credit$V7)] <- moda(credit$V7)
summary(credit)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
library(caret)
modelLookup(("gbm"))
#Comprobación visual para determinar si los variables numéricas se ajustan a una normal
library(ggplot2)
library(gridExtra)
p1 = ggplot(data=credit,aes(sample=V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
p2 = ggplot(data=credit,aes(sample=V14)) +
ggtitle("QQ plot para V14") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
grid.arrange(p1,p2,nrow=2)
credit$V2[is.na(credit$V2)] <-median(credit$V2,na.rm = TRUE)
credit$V14[is.na(credit$V14)] <-median(credit$V14,na.rm = TRUE)
summary(credit)
# Función para calcular la moda
moda <- function(x) {
names(which.max(table(x, useNA = "no")))
}
credit$V1[is.na(credit$V1)] <- moda(credit$V1)
credit$V4[is.na(credit$V4)] <- moda(credit$V4)
credit$V5[is.na(credit$V5)] <- moda(credit$V5)
credit$V6[is.na(credit$V6)] <- moda(credit$V6)
credit$V7[is.na(credit$V7)] <- moda(credit$V7)
summary(credit)
summary(credit)
rf_model <- train(
credit.varSalida ~ .,  # fórmula: la variable objetivo (resultado) y todos los predictores
data = credit.Datos.Train,  # conjunto de datos de entrenamiento
method = "rf",  # especificamos el modelo Random Forest
trControl = trainControl(method = "cv", number = 10),  # 10-fold cross-validation
importance = TRUE  # Para calcular la importancia de las variables
)
credit.modelo.rf = train(credit.Datos.Train[credit.varsEntrada],
credit.Datos.Train[[credit.varSalida]],
method='rf')
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.modelo.rf = train(credit.Datos.Train[credit.varsEntrada],
credit.Datos.Train[[credit.varSalida]],
method='rf')
rf_model <- train(
credit.varSalida ~ .,  # fórmula: la variable objetivo (resultado) y todos los predictores
data = credit.Datos.Train,  # conjunto de datos de entrenamiento
method = "rf",  # especificamos el modelo Random Forest
trControl = trainControl(method = "cv", number = 10),  # 10-fold cross-validation
importance = TRUE  # Para calcular la importancia de las variables
)
summary(credit)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
summary(credit)
# Eliminar las filas con NA en cualquier columna del data frame
credit <- na.omit(credit)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
# Usar la función train() de caret para entrenar el modelo Random Forest
rf_model <- train(x=credit.Datos.Train[credit.varsEntrada],y=credit.Datos.Train[credit.varSalida], method = "rf", trControl = trainControl(method = "cv", number = 10))
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
# Usar la función train() de caret para entrenar el modelo Random Forest
rf_model <- train(x=credit.Datos.Train[credit.varsEntrada],y=credit.Datos.Train[credit.varSalida], method = "rf", trControl = trainControl(method = "cv", number = 10))
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
# Usar la función train() de caret para entrenar el modelo Random Forest
rf_model <- train(x=credit.Datos.Train[credit.varsEntrada],y=credit.Datos.Train[credit.varSalida], method = "rf", trControl = trainControl(method = "cv", number = 10))
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
library(caret)
modelLookup(("gbm"))
#Comprobación visual para determinar si los variables numéricas se ajustan a una normal
library(ggplot2)
library(gridExtra)
p1 = ggplot(data=credit,aes(sample=V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
p2 = ggplot(data=credit,aes(sample=V14)) +
ggtitle("QQ plot para V14") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
grid.arrange(p1,p2,nrow=2)
credit$V2[is.na(credit$V2)] <-median(credit$V2,na.rm = TRUE)
credit$V14[is.na(credit$V14)] <-median(credit$V14,na.rm = TRUE)
# Función para calcular la moda
moda <- function(x) {
names(which.max(table(x, useNA = "no")))
}
credit$V1[is.na(credit$V1)] <- moda(credit$V1)
credit$V4[is.na(credit$V4)] <- moda(credit$V4)
credit$V5[is.na(credit$V5)] <- moda(credit$V5)
credit$V6[is.na(credit$V6)] <- moda(credit$V6)
credit$V7[is.na(credit$V7)] <- moda(credit$V7)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
library(gbm)
install.packages("gbm")
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
library(gbm)
set.seed(1234)
modeloSinTratarDatos <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
modeloSinTratarDatos
library(caret)
modelLookup("rf")
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
library(randomForest)
set.seed(1234)
modeloSinTratarDatos <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
library(randomForest)
set.seed(1234)
# Eliminar filas con NA en la variable dependiente
credit.Datos.Train <- credit.Datos.Train[!is.na(credit.Datos.Train[[credit.varSalida]]), ]
modeloSinTratarDatos <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
library(randomForest)
library(caret)
# Imputación con la media (por ejemplo) para las variables numéricas
preProc <- preProcess(credit.Datos.Train[credit.varsEntrada], method = "medianImpute")
credit.Datos.Train <- predict(preProc, newdata = credit.Datos.Train)
# Ahora entrenar el modelo
modeloSinTratarDatos <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
library(randomForest)
library(caret)
# Imputación con la media (por ejemplo) para las variables numéricas
preProc <- preProcess(credit.Datos.Train[credit.varsEntrada], method = "medianImpute")
credit.Datos.Train <- predict(preProc, newdata = credit.Datos.Train)
# Ahora entrenar el modelo
modeloSinTratarDatos <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
verbose = FALSE
)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
library(randomForest)
library(caret)
# Intentar con un valor fijo de mtry
modeloSinTratarDatos <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(mtry = 3),  # Ajustar mtry manualmente
verbose = FALSE
)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
library(randomForest)
library(caret)
# Intentar con un valor fijo de mtry
modeloSinTratarDatos <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(mtry = 1),  # Ajustar mtry manualmente
verbose = FALSE
)
