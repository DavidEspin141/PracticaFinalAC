media = mean(datos2)
var = var(datos2)
hist(datos2)
Q1 = quantile(datos2,0.25)
Q2 = quantile(datos2,0.5)
Q3 = quantile(datos2,0.75)
RIC = Q3-Q1
datosatipicos = datos2[datos2<Q1-1.5*RIC | datos2>Q3+1.5*RIC]
boxplot(datos2)
Q3
#### b) ####
c(media,1/0.3)
vari = var(datos2)
c(vari,1/o.3^2)
c(vari,1/0.3^2)
c(Q1,qexp(0.25,0.3))
c(Q3,qexp(0.75,0.3))
##### Ejercicio 1 #####
### a) ###
f1 = function(){
lista = rexp(1000,20)
lista2=cumsum(lista)
return(which(lista2>=1)[1])
}
datos = c()
for(i in 1:10000){datos[i] = f1()}
#### b) ###
hist(datos)
#Parece binomial o poisson, debemos mirar la media y varianza para elegir una
c(mean(datos),var(datos))
#Como son muy parecidos parece una poissons con parámetro Landa
Landa = mean(datos)
#Media y varianza parecida, debemos calcular p de la binomial y ver si es grande o pequeña, si es pequeña se trata de una binomial
#np = media y np(1-p)=var
p = 1-var(datos)/mean(datos)
p
#P es pequeña, por tanto binomial
n = mean(datos)/p
n
#### C) ####
layout(1)
cuart=seq(0.1,0.9,0.1)
Qdat1 = quantile(datos,cuart)
Qdat1teo = qbinom(cuart,n,p)
plot(Qdat1,Qdat1teo)
abline(0,1)
##### Ejercicio 2 ####
### a) ###
datos2 = rexp(100000,0.3)
media = mean(datos2)
varianza = var(datos2)
hist(datos2)
Q1 = quantile(datos2,0.25)
Q2 = quantile(datos2,0.5)
Q3 = quantile(datos2,0.75)
RIC = Q3-Q1
RIC
Q3
Q1 = as.numeric(quantile(datos2,0.25))
Q2 = as.numeric(quantile(datos2,0.5))
Q3 = as.numeric(quantile(datos2,0.75))
RIC = Q3-Q1
RIC
datosatipicos = datos2[datos2<Q1-1.5*RIC | datos2>Q3+1.5*RIC]
boxplot(datos2)
datosatipicos = datos2[datos2<Q1-1.5*RIC | datos2>Q3+1.5*RIC]
boxplot(datos2)
#Como vemos, por encima del punto Q3 hay una gran cantidad de datos atípicos. La linea negra gruesa es la mediana.
### b) ###
c(media,1/0.3)
c(varianza,1/0.3^2)
c(Q1,qexp(datos2,0.25))
c(Q1,qexp(0.3,0.25))
c(Q1,qexp(0.25,0.3))
c(Q3,qexp(0.75,0.3))
#Como vemos todo es muy parecido a lo que sale aplicando la exponencial
### c) ###
max(datos2)
val = 0:35
prob = c()
for(i in 0:35){
listaaux=datos2[datos2>=i & datos2<i+1]
prob[i] = (length(listaaux))/length(datos2)
}
sum(prob)
for(i in 0:35){
listaaux=datos2[datos2>=i & datos2<i+1]
prob[i+1] = (length(listaaux))/length(datos2)
}
sum(prob)
### b) ###
media.X = sum(val*prob)
### b) ###
f = function()sum(prob[val==x])
f = Vectorize(f)
F = function()sum(prob[val<=x])
F = Vectorize(F)
media.X = sum(prob*f(val))
### b) ###
f = function(x)sum(prob[val==x])
f = Vectorize(f)
F = function(x)sum(prob[val<=x])
F = Vectorize(F)
media.X = sum(prob*f(val))
media.X = sum(val*f(val))
varianza.X = sum((val-media.X)^2*f(val))
percentiles = function(p){
for(a in val){
if(F(a)>=p){return(a)}
}
}
percentiles = Vectorize(percentiles)
c(percentiles(0.25))
### e) ###
plot(val,f(val),type='h')
plot(val,F(val),type = 's')
### e) ###
plot(val,f(val),type='h')
hist(val)
### e) ###
plot(val,f(val),type='h')
## Se trata de una función decreciente de valores enteros, por lo tanto es una geométrica
p2 = 1/(1+media.X)
## Diagrama
layout(1)
cuart = seq(0.05,0.95,0.05)
Qdat2 = quantile(val,cuart)
Qdat2teo = qgeom(cuart,p2)
plot(Qdat2,Qdat2teo)
abline(0,1)
Qdat2 = percentiles(cuart)
Qdat2teo = qgeom(cuart,p2)
plot(Qdat2,Qdat2teo)
abline(0,1)
la puta de tu madre
knitr::opts_chunk$set(echo = TRUE)
install.packages("lattice")
install.packages("https://cran.r-project.org/src/contrib/Archive/nutshell.bbdb/nutshell.bbdb_1.0.tar.gz",
repos = NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/nutshell.audioscrobbler/nutshell.audioscrobbler_1.0.tar.gz",
repos = NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/nutshell/nutshell_2.0.tar.gz",
repos = NULL, type="source")
#Creamos una variable "n" y la inicializamos con el valor 15
n <- 15
#Preguntamos por su contenido
n
#Ahora le damos el valor 5 (podemos cambiar el sentido del operador)
5 -> n
n
x <- 1
#R es case sensitive
X <- 10
x
#Podemos trabajar con cadenas de caracteres, entrecomillando
name <- "Carmen"
#Podemos concatener comandos
n1 <- 10; n2 <- 100
#Podemos usar reales
m <- 0.5
#Podemos preguntar qué hay definido en nuestra sesión
ls()
#Podemos buscar con patrones
ls(pat = "m")
ls(pat = "^m")
ls.str()
#Podemos crear una tabla con vectores de la misma longitud
M <- data.frame(n1, n2, m)
#Podemos preguntar por la estructura de la tabla
str(M)
#Ahora preguntamos solo por el primer nivel de la estructura
str(M, max.level=-1)
#Ahora preguntamos solo por el primer nivel de la estructura
str(M, max.level=-1)
credit<- read.csv("credit+approval/crx.data", header=FALSE)
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
summary(credit)
str(credit)
str(credit)
setwd("~/Escritorio/AC/PracticaFinal")
credit<- read.csv("credit+approval/crx.data", header=FALSE)
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
str(credit)
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
str(credit)
levels(credit$V1)
levels(credit$V4)
levels(credit$V5)
levels(credit$V6)
levels(credit$V7)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
str(credit)
levels(credit$V4)<-c(levels(credit$V4),"t")
str(credit$V4)
summary(credit)
sum(!complete.cases(credit))
head(credit)
rowid_to_column(credit)[!complete.cases(credit),]
(credit)[!complete.cases(credit),]
nrow(credit[!complete.cases(credit),])
(credit)[!complete.cases(credit),]
nrow(credit[!complete.cases(credit),])
(credit)[!complete.cases(credit),]
symnum(cor(credit,use="complete.obs"))
colSums(is.na(credit))  # Número de NAs por columna
rowSums(is.na(credit))  # Número de NAs por fila
colSums(is.na(credit))  # Número de NAs por columna
(credit)[!complete.cases(credit),]
nrow(credit[!complete.cases(credit),])
colSums(is.na(credit))  # Número de NAs por columna
corrplot::corrplot(cor(credit))
#Comprobación visual para determinar si los variables numéricas se ajustan a una normal
p1 = ggplot(data=credit,aes(sample=credit$V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
#Comprobación visual para determinar si los variables numéricas se ajustan a una normal
library(ggplot2)
p1 = ggplot(data=credit,aes(sample=credit$V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
p2 = ggplot(data=credit,aes(sample=credit$V14)) +
ggtitle("QQ plot para V14") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
grid.arrange(p1,p2,nrow=2)
library(gridExtra)
p1 = ggplot(data=credit,aes(sample=credit$V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
p2 = ggplot(data=credit,aes(sample=credit$V14)) +
ggtitle("QQ plot para V14") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
grid.arrange(p1,p2,nrow=2)
#Comprobación visual para determinar si los variables numéricas se ajustan a una normal
library(ggplot2)
library(gridExtra)
p1 = ggplot(data=credit,aes(sample=V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
p2 = ggplot(data=credit,aes(sample=V14)) +
ggtitle("QQ plot para V14") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
grid.arrange(p1,p2,nrow=2)
(credit)[!complete.cases(credit),]
nrow(credit[!complete.cases(credit),])
ggplot(credit, aes(x = "", y = V2)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
ggplot(credit, aes(x = "", y = V1)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
ggplot(credit, aes(x = "", y = V2)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
# Filtrar solo las variables numéricas
library(dplyr)
data_numeric <- data %>%
select(where(is.numeric))  # Selecciona solo columnas numéricas
data_numeric <- credit %>%
select(where(is.numeric))  # Selecciona solo columnas numéricas
# Filtrar solo las variables numéricas
library(dplyr)
data_numeric <- credit %>%
select(where(is.numeric))  # Selecciona solo columnas numéricas
data_long <- data_numeric %>%
pivot_longer(
cols = everything(),      # Todas las columnas numéricas
names_to = "Variable",    # Nombre de las variables (columna nueva)
values_to = "Valor"       # Valores correspondientes
)
# Filtrar solo las variables numéricas
library(dplyr)
data_numeric <- credit %>%
select(where(is.numeric))  # Selecciona solo columnas numéricas
data_long <- data_numeric %>%
pivot_longer(
cols = everything(),      # Todas las columnas numéricas
names_to = "Variable",    # Nombre de las variables (columna nueva)
values_to = "Valor"       # Valores correspondientes
)
install.packages("tidyr")
# Cargar el paquete tidyr
library(tidyr)
# Filtrar solo las variables numéricas
library(dplyr)
data_numeric <- credit %>%
select(where(is.numeric))  # Selecciona solo columnas numéricas
data_long <- data_numeric %>%
pivot_longer(
cols = everything(),      # Todas las columnas numéricas
names_to = "Variable",    # Nombre de las variables (columna nueva)
values_to = "Valor"       # Valores correspondientes
)
ggplot(data_long, aes(x = Variable, y = Valor, fill = Variable)) +
geom_boxplot(color = "black") +
theme_minimal() +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Boxplot de Todas las Variables Numéricas",
x = "Variables",
y = "Valores"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = "", y = V2)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
library(ggplot2)
ggplot(credit, aes(x = "", y = V2)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
library(gridExtra)
library(ggplot2)
g1<-ggplot(credit, aes(x = "", y = V2)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
g2<-ggplot(credit, aes(x = "", y = V3)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
g3<-ggplot(credit, aes(x = "", y = V8)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
g4<-ggplot(credit, aes(x = "", y = V11)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
g5<-ggplot(credit, aes(x = "", y = V14)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
g6<-ggplot(credit, aes(x = "", y = V15)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
grid.arrange(g1,g2,g3,g4,g5,g6,nrow=3)
grid.arrange(g1,g2,g3,g4,g5,g6,ncol=3)
grid.arrange(g1,g2)
g1
g2
g3
g4
g5
g6
library(gridExtra)
library(ggplot2)
g1<-ggplot(credit, aes(x = "", y = V2)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
g2<-ggplot(credit, aes(x = "", y = V3)) +
geom_boxplot() +
labs(y = "V3", x = "") +
theme_minimal()
g3<-ggplot(credit, aes(x = "", y = V8)) +
geom_boxplot() +
labs(y = "V8", x = "") +
theme_minimal()
g4<-ggplot(credit, aes(x = "", y = V11)) +
geom_boxplot() +
labs(y = "V11", x = "") +
theme_minimal()
g5<-ggplot(credit, aes(x = "", y = V14)) +
geom_boxplot() +
labs(y = "V14", x = "") +
theme_minimal()
g6<-ggplot(credit, aes(x = "", y = V15)) +
geom_boxplot() +
labs(y = "V15", x = "") +
theme_minimal()
g6
grid.arrange(g1,g2,g3)
grid.arrange(g1,g2,g3,ncol=2)
grid.arrange(g1,g2,g3,g4ncol=2)
grid.arrange(g1,g2,g3,g4,ncol=2)
grid.arrange(g5,g6)
library(gridExtra)
library(ggplot2)
g1<-ggplot(credit, aes(x = "", y = V2)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
g2<-ggplot(credit, aes(x = "", y = V3)) +
geom_boxplot() +
labs(y = "V3", x = "") +
theme_minimal()
g3<-ggplot(credit, aes(x = "", y = V8)) +
geom_boxplot() +
labs(y = "V8", x = "") +
theme_minimal()
g4<-ggplot(credit, aes(x = "", y = V11)) +
geom_boxplot() +
labs(y = "V11", x = "") +
theme_minimal()
g5<-ggplot(credit, aes(x = "", y = V14)) +
geom_boxplot() +
labs(y = "V14", x = "") +
theme_minimal()
g6<-ggplot(credit, aes(x = "", y = V15)) +
geom_boxplot() +
labs(y = "V15", x = "") +
theme_minimal()
grid.arrange(g1,g2,g3,g4,ncol=2)
grid.arrange(g5,g6)
library(gridExtra)
library(ggplot2)
g1<-ggplot(na.omit(credit), aes(x = "", y = V2)) +
geom_boxplot() +
labs(y = "V2", x = "") +
theme_minimal()
g2<-ggplot(na.omit(credit), aes(x = "", y = V3)) +
geom_boxplot() +
labs(y = "V3", x = "") +
theme_minimal()
g3<-ggplot(na.omit(credit), aes(x = "", y = V8)) +
geom_boxplot() +
labs(y = "V8", x = "") +
theme_minimal()
g4<-ggplot(na.omit(credit), aes(x = "", y = V11)) +
geom_boxplot() +
labs(y = "V11", x = "") +
theme_minimal()
g5<-ggplot(na.omit(credit), aes(x = "", y = V14)) +
geom_boxplot() +
labs(y = "V14", x = "") +
theme_minimal()
g6<-ggplot(na.omit(credit), aes(x = "", y = V15)) +
geom_boxplot() +
labs(y = "V15", x = "") +
theme_minimal()
grid.arrange(g1,g2,g3,g4,ncol=2)
grid.arrange(g5,g6)
(credit)[!complete.cases(credit),]
nrow(credit[!complete.cases(credit),])
sum(ncol(is.na(credit)))
colSums(is.na(credit)))
colSums(is.na(credit))
(credit)[!complete.cases(credit),]
colSums(is.na(credit))
(credit)[!complete.cases(credit),]
colSums(is.na(credit))
(credit)[!complete.cases(credit),]
colSums(is.na(credit))
#Comprobación visual para determinar si los variables numéricas se ajustan a una normal
library(ggplot2)
library(gridExtra)
p1 = ggplot(data=credit,aes(sample=V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
p2 = ggplot(data=credit,aes(sample=V14)) +
ggtitle("QQ plot para V14") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
grid.arrange(p1,p2,nrow=2)
credit$V2[is.na(credit$V2)] <-median(credit$V2,na.rm = TRUE)
credit$V14[is.na(credit$V14)] <-median(credit$V14,na.rm = TRUE)
summary(credit)
summary(credit)
credit$V1[is.na(credit$V1)] <- moda(credit$V1)
# Función para calcular la moda
moda <- function(x) {
names(which.max(table(x, useNA = "no")))
}
# Función para calcular la moda
moda <- function(x) {
names(which.max(table(x, useNA = "no")))
}
credit$V1[is.na(credit$V1)] <- moda(credit$V1)
credit$V4[is.na(credit$V4)] <- moda(credit$V4)
credit$V5[is.na(credit$V5)] <- moda(credit$V5)
credit$V6[is.na(credit$V6)] <- moda(credit$V6)
credit$V7[is.na(credit$V7)] <- moda(credit$V7)
summary(credit)
