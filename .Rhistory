###### b) ######
media = sum(val*f(val))
desviacion = sum((val-media)^2*f(val))
desviacion = sqrt(varianza)
varianza = sum((val-media)^2*f(val))
desviacion = sqrt(varianza)
F=function(x) sum(prob[val<=x])
F=Vectorize(F)
plot(val,f(val),type = 'h')
points(val,f(val),pch = 20)
plot(val,f(val),type = 's')
plot(val,f(val),type = 'l')
plot(val,f(val),type = 'h')
points(val,f(val),pch = 20)
c = (min(val)-1,val,max(val)+1)
c = c(min(val)-1,val,max(val)+1)
plot(c,F(c),type='s')
points(val,F(val),pch=20)
plot(c,F(c),type='h')
plot(c,F(c),type='l')
plot(c,F(c),type='h')
points(val,F(val),pch=20)
plot(c,F(c),type='s')
points(val,F(val),pch=20)
##### c) #####
1-F(80)
##### c) #####
1-F(79)
F(120)-F(30)
##### d) #####
cuartiles = function(x){
for(a in val){
if(F(a)>=x){return(a)}
}
}
cuartiles = Vectorize(cuartiles)
Q1 = cuartiles(0.25)
Q2 = cuartiles(0.5)
Q3 = cuartiles(0.75)
RIC = Q3 - Q1
datosatipicos = val[val<Q1-1,5*RIC | val>Q3+1.5*RIC]
##### d) #####
cuartiles = function(p){
for(a in val){
if(F(a)>=p){return(a)}
}
}
cuartiles = Vectorize(cuartiles)
Q1 = cuartiles(0.25)
Q2 = cuartiles(0.5)
Q3 = cuartiles(0.75)
RIC = Q3 - Q1
datosatipicos = val[val<Q1-1,5*RIC | val>Q3+1.5*RIC]
###### b) ######
media = sum(val*f(val))
varianza = sum((val-media)^2*f(val))
desviacion = sqrt(varianza)
F=function(x) sum(prob[val<=x])
F=Vectorize(F)
plot(val,f(val),type = 'h')
points(val,f(val),pch = 20)
c = c(min(val)-1,val,max(val)+1)
plot(c,F(c),type='s')
points(val,F(val),pch=20)
##### c) #####
1-F(79)
F(120)-F(30)
##### d) #####
cuartiles = function(p){
for(a in val){
if(F(a)>=p){return(a)}
}
}
cuartiles = Vectorize(cuartiles)
Q1 = cuartiles(0.25)
Q2 = cuartiles(0.5)
Q3 = cuartiles(0.75)
RIC = Q3 - Q1
datosatipicos = val[val<Q1-1,5*RIC | val>Q3+1.5*RIC]
##### d) #####
percentil = function(p){
for(a in val){
if(F(a)>=p){return(a)}
}
}
cuartiles = Vectorize(cuartiles)
percentil = Vectorize(percentil)
Q1 = percentil(0.25)
Q2 = percentil(0.5)
Q3 = percentil(0.75)
RIC = Q3 - Q1
datosatipicos = val[val<Q1-1,5*RIC | val>Q3+1.5*RIC]
#Ejercicio 1
#Apartado a
val = 3:200
k = 1/sum((val-100)^2)
k
prob = k*(val-100)^2
f = function(x) sum(prob[val==x])
f = Vectorize(f)
#Apartado b
media = sum(val*f(val))
media
varianza = sum((val-media)^2*f(val))
varianza
desviacionTipica = sqrt(varianza)
desviacionTipica
F = function(x) sum(prob[val<=x])
F = Vectorize(F)
plot(val,f(val),type="h")
points(val,f(val),pch=20)
x = c(min(val)-1,val,max(val)+1)
plot(x,F(x),type="s")
points(val,F(val),pch=20)
#Apartado c
#P(X>=80)
1-F(79)
#P(30<X<=120)
F(120)-F(30)
#Apartado d
percentil = function(p){
for(a in val){
if(F(a)>=p){return(a)}
}
}
percentil = Vectorize(percentil)
Q1 = percentil(0.25)
Q1
Q2 = percentil(0.5)
Q2
Q3 = percentil(0.75)
Q3
RIC = Q3-Q1
atipicos = val[val<Q1-1.5*RIC | val>Q3+1.5*RIC]
###### EXAMEN LUNES ######
### EJERCICIO 1####
val = 3:200
#### a) ####
k = 1/sum((val-100)^2)
k
prob = k*((val-100)^2)
sum(prob)
f = function(x) sum(prob[val==x])
f = Vectorize(f)
###### b) ######
media = sum(val*f(val))
varianza = sum((val-media)^2*f(val))
desviacion = sqrt(varianza)
F = function(x) sum(prob[val<=x])
F = Vectorize(F)
plot(val,f(val),type = 'h')
points(val,f(val),pch=20)
c = c(min(val)-1,val,max(val)+1)
plot(c,F(c),type = 's')
points (val,F(val),pch=20)
###### d) ######
cuartiles = function(p){
for(a in val){
if(F(a)>=p){return(a)}
}
}
cuartiles = Vectorize(cuartiles)
Q1 = cuartiles(0.25)
Q2 = cuartiles(0.5)
Q3 = cuartiles(0.75)
RIC = Q3-Q1
atipicos = val[val<Q1-1.5*RIC | val>Q3+1,5*RIC]
atipicos = val[val<Q1-1.5*RIC | val>Q3+1.5*RIC]
atipicos
###### e) ######
datos = sample(val,4000,prob = prob,replace = TRUE)
prop.table(datos)
prop.table(table(datos))
f(val)
cumsum(prop.table(table(datos)))
F(val)
barplot(datos)
barplot(table(datos))
plot(val,f(val),type='h')
c(media,mean(datos))
c(varianza,var(datos))
c(desviacion,dv(datos))
############# EJERCICIO 2 ########
# f(x) = k/1+(x-30)⁴   si 20<x<40    0 en otro caso
##### a) #####
f = function(x){
if(x<=20){return(0)}
if(x>=40){return(0)}
return(1/(1+(x-30)^4))
}
f = Vectorize(f)
k = 1/integrate(f,20,40)$value
f = function(x){
if(x<=20){return(0)}
if(x>=40){return(0)}
return(k/(1+(x-30)^4))
}
f = Vectorize(f)
return(integrate(f,20,x)$value)
##### b) ####
F = function(x){
if(x<=20){return(0)}
if(x>=40){return(1)}
return(integrate(f,20,x)$value)
}
F=Vectorize(F)
esperanza = integrate(function(x) x*f(x),20,40)$value
esperanza
varianza = integrate(function(x) (x-media)^2*f(x),20,40)$value
varianza
varianza = integrate(function(x) (x-esperanza)^2*f(x),20,40)$value
varianza
##### c) #####
F(35)-F(25)
integrate(f,25,35)$value
return(per)
##### d) #####
percentiles = function(p){
per = uniroot(function(x) F(x)-p,c(20,40))$root
return(per)
}
percentiles=Vectorize(percentiles)
Q1 = percentiles(0.1)
Q1
percentiles(0.1)
percentiles(0.95)
###### e) #####
datos = percentiles(runif(10000,0,1))
hist(datos,breaks = seq(20,40,0.1),freq = FALSE)
plot(f,20,40)
length(datos[datos<percentiles(0.1)])/length(datos)
length(datos[datos>percentiles(0.95)])/length(datos)
length(datos[datos<percentiles(0.1)])/length(datos)*100
length(datos[datos>percentiles(0.95)])/length(datos)*100
##### EJERCICIO 1 ###
lista = rexp(1000,20)
lista2 = cumsum(lista)
datos = which(lista2>=1)[1]
dato = which(lista2>=1)[1]
#### a) ####
n = 10000
#### a) ####
f = function(){
lista = rexp(1000,20)
lista2 = cumsum(lista)
dato = which(lista2>=1)[1]
}
#### a) ####
f1 = function(){
lista = rexp(1000,20)
lista2 = cumsum(lista)
dato = which(lista2>=1)[1]
}
f1 = Vectorize(f1)
n = 10000
#### a) ####
f1 = function(x){
lista = rexp(1000,20)
lista2 = cumsum(lista)
dato = which(lista2>=1)[1]
}
f1 = Vectorize(f1)
n = 10000
datosejercicio = c()
for (i in 1:n){datosejercicio[i]=f1()}
f1 = Vectorize(f1)
n = 10000
datosejercicio = c()
for (i in 1:n){datosejercicio[i]=f1()}
#### a) ####
f1 = function(){
lista = rexp(1000,20)
lista2 = cumsum(lista)
dato = which(lista2>=1)[1]
}
f1 = Vectorize(f1)
datosejercicio = c()
for (i in 1:10000){datosejercicio[i]=f1()}
#### b) ###
hist(datosejercicio)
c(mean(datosejercicio),var(datosejercicio))
#Por el tipo de datos que tiene y la forma de su histograma parece una binomial
#np = media y np(1-p) = var
p = 1-var(datosejercicio)/mean(datosejercicio)
p
n = mean(datosejercicio)/p
n
#como p es muy pequeña, todo parece apuntar a que se trata de poisson
landa = mean(datosejercicio)
### c) ####
layout(1)
cuart = seq(0.1,0.9,0.1)
Qdat1 = quantile(datosejercicio,cuart)
Qdat2 = qpois(cuart,landa)
plot(Qdat1,Qdat2)
abline(0,1)
### EJERCICIO 2 ####
### a) ###
datos2 = rexp(100000,0.3)
media = sum(datos2)/length(datos2)
media = mean(datos2)
var = var(datos2)
hist(datos2)
Q1 = quantile(datos2,0.25)
Q2 = quantile(datos2,0.5)
Q3 = quantile(datos2,0.75)
RIC = Q3-Q1
datosatipicos = datos2[datos2<Q1-1.5*RIC | datos2>Q3+1.5*RIC]
boxplot(datos2)
Q3
#### b) ####
c(media,1/0.3)
vari = var(datos2)
c(vari,1/o.3^2)
c(vari,1/0.3^2)
c(Q1,qexp(0.25,0.3))
c(Q3,qexp(0.75,0.3))
##### Ejercicio 1 #####
### a) ###
f1 = function(){
lista = rexp(1000,20)
lista2=cumsum(lista)
return(which(lista2>=1)[1])
}
datos = c()
for(i in 1:10000){datos[i] = f1()}
#### b) ###
hist(datos)
#Parece binomial o poisson, debemos mirar la media y varianza para elegir una
c(mean(datos),var(datos))
#Como son muy parecidos parece una poissons con parámetro Landa
Landa = mean(datos)
#Media y varianza parecida, debemos calcular p de la binomial y ver si es grande o pequeña, si es pequeña se trata de una binomial
#np = media y np(1-p)=var
p = 1-var(datos)/mean(datos)
p
#P es pequeña, por tanto binomial
n = mean(datos)/p
n
#### C) ####
layout(1)
cuart=seq(0.1,0.9,0.1)
Qdat1 = quantile(datos,cuart)
Qdat1teo = qbinom(cuart,n,p)
plot(Qdat1,Qdat1teo)
abline(0,1)
##### Ejercicio 2 ####
### a) ###
datos2 = rexp(100000,0.3)
media = mean(datos2)
varianza = var(datos2)
hist(datos2)
Q1 = quantile(datos2,0.25)
Q2 = quantile(datos2,0.5)
Q3 = quantile(datos2,0.75)
RIC = Q3-Q1
RIC
Q3
Q1 = as.numeric(quantile(datos2,0.25))
Q2 = as.numeric(quantile(datos2,0.5))
Q3 = as.numeric(quantile(datos2,0.75))
RIC = Q3-Q1
RIC
datosatipicos = datos2[datos2<Q1-1.5*RIC | datos2>Q3+1.5*RIC]
boxplot(datos2)
datosatipicos = datos2[datos2<Q1-1.5*RIC | datos2>Q3+1.5*RIC]
boxplot(datos2)
#Como vemos, por encima del punto Q3 hay una gran cantidad de datos atípicos. La linea negra gruesa es la mediana.
### b) ###
c(media,1/0.3)
c(varianza,1/0.3^2)
c(Q1,qexp(datos2,0.25))
c(Q1,qexp(0.3,0.25))
c(Q1,qexp(0.25,0.3))
c(Q3,qexp(0.75,0.3))
#Como vemos todo es muy parecido a lo que sale aplicando la exponencial
### c) ###
max(datos2)
val = 0:35
prob = c()
for(i in 0:35){
listaaux=datos2[datos2>=i & datos2<i+1]
prob[i] = (length(listaaux))/length(datos2)
}
sum(prob)
for(i in 0:35){
listaaux=datos2[datos2>=i & datos2<i+1]
prob[i+1] = (length(listaaux))/length(datos2)
}
sum(prob)
### b) ###
media.X = sum(val*prob)
### b) ###
f = function()sum(prob[val==x])
f = Vectorize(f)
F = function()sum(prob[val<=x])
F = Vectorize(F)
media.X = sum(prob*f(val))
### b) ###
f = function(x)sum(prob[val==x])
f = Vectorize(f)
F = function(x)sum(prob[val<=x])
F = Vectorize(F)
media.X = sum(prob*f(val))
media.X = sum(val*f(val))
varianza.X = sum((val-media.X)^2*f(val))
percentiles = function(p){
for(a in val){
if(F(a)>=p){return(a)}
}
}
percentiles = Vectorize(percentiles)
c(percentiles(0.25))
### e) ###
plot(val,f(val),type='h')
plot(val,F(val),type = 's')
### e) ###
plot(val,f(val),type='h')
hist(val)
### e) ###
plot(val,f(val),type='h')
## Se trata de una función decreciente de valores enteros, por lo tanto es una geométrica
p2 = 1/(1+media.X)
## Diagrama
layout(1)
cuart = seq(0.05,0.95,0.05)
Qdat2 = quantile(val,cuart)
Qdat2teo = qgeom(cuart,p2)
plot(Qdat2,Qdat2teo)
abline(0,1)
Qdat2 = percentiles(cuart)
Qdat2teo = qgeom(cuart,p2)
plot(Qdat2,Qdat2teo)
abline(0,1)
la puta de tu madre
knitr::opts_chunk$set(echo = TRUE)
install.packages("lattice")
install.packages("https://cran.r-project.org/src/contrib/Archive/nutshell.bbdb/nutshell.bbdb_1.0.tar.gz",
repos = NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/nutshell.audioscrobbler/nutshell.audioscrobbler_1.0.tar.gz",
repos = NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/nutshell/nutshell_2.0.tar.gz",
repos = NULL, type="source")
#Creamos una variable "n" y la inicializamos con el valor 15
n <- 15
#Preguntamos por su contenido
n
#Ahora le damos el valor 5 (podemos cambiar el sentido del operador)
5 -> n
n
x <- 1
#R es case sensitive
X <- 10
x
#Podemos trabajar con cadenas de caracteres, entrecomillando
name <- "Carmen"
#Podemos concatener comandos
n1 <- 10; n2 <- 100
#Podemos usar reales
m <- 0.5
#Podemos preguntar qué hay definido en nuestra sesión
ls()
#Podemos buscar con patrones
ls(pat = "m")
ls(pat = "^m")
ls.str()
#Podemos crear una tabla con vectores de la misma longitud
M <- data.frame(n1, n2, m)
#Podemos preguntar por la estructura de la tabla
str(M)
#Ahora preguntamos solo por el primer nivel de la estructura
str(M, max.level=-1)
#Ahora preguntamos solo por el primer nivel de la estructura
str(M, max.level=-1)
setwd("~/Escritorio/AC/PFINAL")
credit
setwd("~/Escritorio/AC/PracticaFinal")
credit <- read.csv("credit+approval/crx.data", header = FALSE)
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit<- read.table("credit+approval/crx.data", header=FALSE)
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit<- read.table("credit+approval/crx.data", header=FALSE)
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit<- read.table("credit+approval/crx.data", header=FALSE)
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit<- read.csv("credit+approval/crx.data", header=FALSE)
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
