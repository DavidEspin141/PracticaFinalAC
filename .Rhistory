credit.Datos.Train_Tratar <- eliminar_outliers(credit.Datos.Train, numeric_cols)
# Entrenar modelo
set.seed(1234)
modeloTratarDatos <- train(
x = credit.Datos.Train_Tratar[credit.varsEntrada],
y = credit.Datos.Train_Tratar[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
modeloTratarDatos
# Predicciones para el modelo sin tratar
pred_SinTratar <- predict(modeloSinTratarDatos, newdata = credit.Datos.Test[credit.varsEntrada])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinTratar <- confusionMatrix(pred_SinTratar, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinTratar)
# Predicciones para el modelo con tratamiento de outliers
pred_Tratar <- predict(modeloTratarDatos, newdata = credit.Datos.Test[credit.varsEntrada])
# Evaluar desempeño en el conjunto de prueba
confMatrix_Tratar <- confusionMatrix(pred_Tratar, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_Tratar)
importancia <- varImp(modelo_gbm)
importancia <- varImp(modeloTratarDatos)
print(importancia)
plot(importancia)
print(importancia)
importancia <- varImp(modeloSinTratarDatos)
print(importancia)
plot(importancia)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V8")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modeloSinTratarDatos, newdata = credit.Datos.Test[credit.varsEntrada])
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V7")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V7","V8")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V7","V8","V14")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V9")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V8")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V14")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V14","V7")
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V14","V7")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V14","V7","V8")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V6")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
library(caret)
modelLookup(("gbm"))
#Comprobación visual para determinar si los variables numéricas se ajustan a una normal
library(ggplot2)
library(gridExtra)
p1 = ggplot(data=credit,aes(sample=V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
p2 = ggplot(data=credit,aes(sample=V14)) +
ggtitle("QQ plot para V14") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
grid.arrange(p1,p2,nrow=2)
credit$V2[is.na(credit$V2)] <-median(credit$V2,na.rm = TRUE)
credit$V14[is.na(credit$V14)] <-median(credit$V14,na.rm = TRUE)
# Función para calcular la moda
moda <- function(x) {
names(which.max(table(x, useNA = "no")))
}
credit$V1[is.na(credit$V1)] <- moda(credit$V1)
credit$V4[is.na(credit$V4)] <- moda(credit$V4)
credit$V5[is.na(credit$V5)] <- moda(credit$V5)
credit$V6[is.na(credit$V6)] <- moda(credit$V6)
credit$V7[is.na(credit$V7)] <- moda(credit$V7)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
library(gbm)
set.seed(1234)
modeloSinTratarDatos <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
modeloSinTratarDatos
eliminar_outliers <- function(df, cols) {
# Iniciar vector lógico para mantener filas válidas
rows_to_keep <- rep(TRUE, nrow(df))
for (col in cols) {
Q1 <- quantile(df[[col]], 0.25, na.rm = TRUE)  # Primer cuartil
Q3 <- quantile(df[[col]], 0.75, na.rm = TRUE)  # Tercer cuartil
IQR_val <- Q3 - Q1                             # Rango intercuartílico
# Límites superior e inferior
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
# Identificar filas con valores dentro de los límites
rows_to_keep <- rows_to_keep & (df[[col]] >= lower_bound & df[[col]] <= upper_bound)
}
# Filtrar filas válidas y eliminar filas con valores NA
return(na.omit(df[rows_to_keep, ]))
}
# Identificar columnas numéricas
numeric_cols <- credit.varsEntrada[sapply(credit.Datos.Train[credit.varsEntrada], is.numeric)]
# Eliminar filas con outliers del conjunto de entrenamiento
credit.Datos.Train_Tratar <- eliminar_outliers(credit.Datos.Train, numeric_cols)
# Entrenar modelo
set.seed(1234)
modeloTratarDatos <- train(
x = credit.Datos.Train_Tratar[credit.varsEntrada],
y = credit.Datos.Train_Tratar[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
modeloTratarDatos
# Predicciones para el modelo sin tratar
pred_SinTratar <- predict(modeloSinTratarDatos, newdata = credit.Datos.Test[credit.varsEntrada])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinTratar <- confusionMatrix(pred_SinTratar, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinTratar)
# Predicciones para el modelo con tratamiento de outliers
pred_Tratar <- predict(modeloTratarDatos, newdata = credit.Datos.Test[credit.varsEntrada])
# Evaluar desempeño en el conjunto de prueba
confMatrix_Tratar <- confusionMatrix(pred_Tratar, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_Tratar)
importancia <- varImp(modeloSinTratarDatos)
print(importancia)
plot(importancia)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V6")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
# Identificar variables candidatas a eliminar
vars_baja_importancia <- c("V9")
# Crear un nuevo conjunto de predictores
credit.varsEntrada_filtradas <- setdiff(credit.varsEntrada, vars_baja_importancia)
# Reentrenar el modelo con variables filtradas
set.seed(123)
modelo_sinV8 <- train(
x = credit.Datos.Train[credit.varsEntrada_filtradas],
y = credit.Datos.Train[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Evaluar el desempeño
print(modelo_sinV8)
# Predicciones para el modelo sin tratar
pred_SinV8 <- predict(modelo_sinV8, newdata = credit.Datos.Test[credit.varsEntrada_filtradas])
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinV8 <- confusionMatrix(pred_SinV8, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinV8)
# Ajustar el preprocesador con Train
preprocess <- preProcess(credit.Datos.Train[credit.varsEntrada], method = c("center", "scale"))
# Transformar el conjunto de entrenamiento
credit.Datos.Train_Scaled <- predict(preprocess, credit.Datos.Train)
# Aplicar los parámetros del preprocesador al conjunto de prueba
credit.Datos.Test_Scaled <- predict(preprocess, credit.Datos.Test)
set.seed(123)
modelo_gbm_scaled <- train(
x = credit.Datos.Train_Scaled[credit.varsEntrada],
y = credit.Datos.Train_Scaled[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = tuneGrid,
verbose = FALSE
)
# Ajustar el preprocesador con Train
preprocess <- preProcess(credit.Datos.Train[credit.varsEntrada], method = c("center", "scale"))
# Transformar el conjunto de entrenamiento
credit.Datos.Train_Scaled <- predict(preprocess, credit.Datos.Train)
# Aplicar los parámetros del preprocesador al conjunto de prueba
credit.Datos.Test_Scaled <- predict(preprocess, credit.Datos.Test)
set.seed(123)
modelo_gbm_scaled <- train(
x = credit.Datos.Train_Scaled[credit.varsEntrada],
y = credit.Datos.Train_Scaled[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
# Predicciones en el conjunto de prueba
pred_scaled <- predict(modelo_gbm_scaled, credit.Datos.Test_Scaled[credit.varsEntrada])
# Evaluar el desempeño
confMatrix_scaled <- confusionMatrix(pred_scaled, credit.Datos.Test_Scaled[[credit.varSalida]])
print(confMatrix_scaled)
# Crear el preprocesador para Min-Max Scaling basado en el conjunto de entrenamiento
preprocess_minmax <- preProcess(credit.Datos.Train[credit.varsEntrada], method = "range")
# Transformar el conjunto de entrenamiento
credit.Datos.Train_MinMax <- predict(preprocess_minmax, credit.Datos.Train)
# Transformar el conjunto de prueba
credit.Datos.Test_MinMax <- predict(preprocess_minmax, credit.Datos.Test)
set.seed(123)
modelo_gbm_minmax <- train(
x = credit.Datos.Train_MinMax[credit.varsEntrada],
y = credit.Datos.Train_MinMax[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = tuneGrid,
verbose = FALSE
)
# Crear el preprocesador para Min-Max Scaling basado en el conjunto de entrenamiento
preprocess_minmax <- preProcess(credit.Datos.Train[credit.varsEntrada], method = "range")
# Transformar el conjunto de entrenamiento
credit.Datos.Train_MinMax <- predict(preprocess_minmax, credit.Datos.Train)
# Transformar el conjunto de prueba
credit.Datos.Test_MinMax <- predict(preprocess_minmax, credit.Datos.Test)
set.seed(123)
modelo_gbm_minmax <- train(
x = credit.Datos.Train_MinMax[credit.varsEntrada],
y = credit.Datos.Train_MinMax[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
modelo_gbm_minmax
# Crear el preprocesador para Min-Max Scaling basado en el conjunto de entrenamiento
preprocess_minmax <- preProcess(credit.Datos.Train[credit.varsEntrada], method = "range")
# Transformar el conjunto de entrenamiento
credit.Datos.Train_MinMax <- predict(preprocess_minmax, credit.Datos.Train)
# Transformar el conjunto de prueba
credit.Datos.Test_MinMax <- predict(preprocess_minmax, credit.Datos.Test)
set.seed(123)
modelo_gbm_minmax <- train(
x = credit.Datos.Train_MinMax[credit.varsEntrada],
y = credit.Datos.Train_MinMax[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose = FALSE
)
modelo_gbm_minmax
# Realizar predicciones en el conjunto de prueba escalado
pred_minmax <- predict(modelo_gbm_minmax, credit.Datos.Test_MinMax[credit.varsEntrada])
# Evaluar el desempeño
library(caret)
confMatrix_minmax <- confusionMatrix(pred_minmax, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_minmax)
# Crear el preprocesador para Min-Max Scaling basado en el conjunto de entrenamiento
preprocess_minmax <- preProcess(credit.Datos.Train[credit.varsEntrada], method = "range")
# Transformar el conjunto de entrenamiento
credit.Datos.Train_MinMax <- predict(preprocess_minmax, credit.Datos.Train)
# Transformar el conjunto de prueba
credit.Datos.Test_MinMax <- predict(preprocess_minmax, credit.Datos.Test)
set.seed(123)
modelo_gbm_minmax <- train(
x = credit.Datos.Train_MinMax[credit.varsEntrada],
y = credit.Datos.Train_MinMax[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 8),
verbose = FALSE
)
modelo_gbm_minmax
# Realizar predicciones en el conjunto de prueba escalado
pred_minmax <- predict(modelo_gbm_minmax, credit.Datos.Test_MinMax[credit.varsEntrada])
# Evaluar el desempeño
library(caret)
confMatrix_minmax <- confusionMatrix(pred_minmax, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_minmax)
# Crear el preprocesador para Min-Max Scaling basado en el conjunto de entrenamiento
preprocess_minmax <- preProcess(credit.Datos.Train[credit.varsEntrada], method = "range")
# Transformar el conjunto de entrenamiento
credit.Datos.Train_MinMax <- predict(preprocess_minmax, credit.Datos.Train)
# Transformar el conjunto de prueba
credit.Datos.Test_MinMax <- predict(preprocess_minmax, credit.Datos.Test)
set.seed(123)
modelo_gbm_minmax <- train(
x = credit.Datos.Train_MinMax[credit.varsEntrada],
y = credit.Datos.Train_MinMax[[credit.varSalida]],
method = "gbm",
trControl = trainControl(method = "cv", number = 10),
verbose = FALSE
)
modelo_gbm_minmax
# Realizar predicciones en el conjunto de prueba escalado
pred_minmax <- predict(modelo_gbm_minmax, credit.Datos.Test_MinMax[credit.varsEntrada])
# Evaluar el desempeño
library(caret)
confMatrix_minmax <- confusionMatrix(pred_minmax, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_minmax)
