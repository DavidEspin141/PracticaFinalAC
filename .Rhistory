print(imp)
# Graficar la importancia de los predictores
plot(imp)
set.seed(1234)
modeloSinTratarDatosV3 <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(mtry = 1),
importance=TRUE,
verbose = FALSE
)
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV3, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
set.seed(1234)
modeloSinTratarDatosV4 <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(mtry = 11),
importance=TRUE,
verbose = FALSE
)
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV4, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
# Ver el modelo entrenado
print(modeloSinTratarDatosV1)
print(modeloSinTratarDatosV2)
print(modeloSinTratarDatosV3)
print(modeloSinTratarDatosV4)
#creación de nuevo modelo a partir de modeloSintratarV1
credit_mod=credit[,!(colnames(credit) %in% c("V2", "V12"))]
credit.varSalida = c("V16")
credit.varsEntrada_mod = setdiff(names(credit_mod), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:13)
modeloSinTratarDatosV5<- train(
x = credit.Datos.Train[credit.varsEntrada_mod],
y = credit.Datos.Train[credit.varSalida],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
importance=TRUE,
verbose = FALSE
)
class(credit.Datos.Train[[credit.varSalida]])
#creación de nuevo modelo a partir de modeloSintratarV1
credit_mod=credit[,!(colnames(credit) %in% c("V2", "V12"))]
credit.varSalida = c("V16")
credit.varsEntrada_mod = setdiff(names(credit_mod), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:13)
modeloSinTratarDatosV5<- train(
x = credit.Datos.Train[credit.varsEntrada_mod],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
importance=TRUE,
verbose = FALSE
)
####################################
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV5, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
print(modeloSinTratarDatosV5)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:15)
modeloSinTratarDatosV1<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
importance=TRUE,
verbose = FALSE
)
####################################
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV1, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
# Intentar con un valor fijo de mtry
set.seed(1234)
modeloSinTratarDatosV2<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
importance=TRUE,
verbose = FALSE
)
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV2, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
set.seed(1234)
modeloSinTratarDatosV3 <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(mtry = 1),
importance=TRUE,
verbose = FALSE
)
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV3, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
set.seed(1234)
modeloSinTratarDatosV4 <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(mtry = 2),
importance=TRUE,
verbose = FALSE
)
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV4, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
# Ver el modelo entrenado
print(modeloSinTratarDatosV1)
print(modeloSinTratarDatosV2)
print(modeloSinTratarDatosV3)
print(modeloSinTratarDatosV4)
#creación de nuevo modelo a partir de modeloSintratarV1
credit_mod=credit[,!(colnames(credit) %in% c("V2", "V12"))]
credit.varSalida = c("V16")
credit.varsEntrada_mod = setdiff(names(credit_mod), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:13)
modeloSinTratarDatosV5<- train(
x = credit.Datos.Train[credit.varsEntrada_mod],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
importance=TRUE,
verbose = FALSE
)
####################################
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV5, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
print(modeloSinTratarDatosV5)
credit_mod2=credit[,!(colnames(credit) %in% c("V12"))]
credit.varsEntrada_mod2 = setdiff(names(credit_mod2), credit.varSalida)
###################################
set.seed(1234)
modeloSinTratarDatosV6<- train(
x = credit.Datos.Train[credit.varsEntrada_mod2],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
importance=TRUE,
verbose = FALSE
)
####################################
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV5, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
print(modeloSinTratarDatosV6)
#Nota: hay que cargar los datos de forma correcta
# Predicciones para el modelos sin tratamiento
set.seed(1234)
pred_SinTratarV1 <- predict(modeloSinTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV1)
set.seed(1234)
pred_SinTratarV2 <- predict(modeloSinTratarDatosV2, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV2)
set.seed(1234)
pred_SinTratarV3 <- predict(modeloSinTratarDatosV3, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV3)
set.seed(1234)
pred_SinTratarV4 <- predict(modeloSinTratarDatosV4, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV4)
set.seed(1234)
pred_SinTratarV5<- predict(modeloSinTratarDatosV5, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV5)
set.seed(1234)
pred_SinTratarV6<- predict(modeloSinTratarDatosV6, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV6)
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinTratar1 <- confusionMatrix(pred_SinTratarV1, credit.Datos.Test[[credit.varSalida]])
confMatrix_SinTratar2 <- confusionMatrix(pred_SinTratarV2, credit.Datos.Test[[credit.varSalida]])
confMatrix_SinTratar3 <- confusionMatrix(pred_SinTratarV3, credit.Datos.Test[[credit.varSalida]])
confMatrix_SinTratar4 <- confusionMatrix(pred_SinTratarV4, credit.Datos.Test[[credit.varSalida]])
confMatrix_SinTratar5 <- confusionMatrix(pred_SinTratarV5, credit.Datos.Test[[credit.varSalida]])
confMatrix_SinTratar6 <- confusionMatrix(pred_SinTratarV6, credit.Datos.Test[[credit.varSalida]])
# Predicciones para el modelo con tratamiento
#set.seed(1234)
#pred_Tratar <- predict(modeloTratarDatos, newdata = credit.Datos.Test[credit.varsEntrada])
#print(pred_Tratar)
# Evaluar desempeño en el conjunto de prueba
#confMatrix_Tratar <- confusionMatrix(pred_Tratar, credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_SinTratar1)
print(confMatrix_SinTratar2)
print(confMatrix_SinTratar3)
print(confMatrix_SinTratar4)
print(confMatrix_SinTratar5)
print(confMatrix_SinTratar6)
#print(confMatrix_Tratar)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
library(caret)
modelLookup("rf")
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:15)
modeloSinTratarDatosV1<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
importance=TRUE,
verbose = FALSE
)
####################################
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV1, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
# Intentar con un valor fijo de mtry
set.seed(1234)
modeloSinTratarDatosV2<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
importance=TRUE,
verbose = FALSE
)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
# Imputar medianas en las columnas numéricas de credit.Datos.Train
credit.Datos.Train$V2[is.na(credit.Datos.Train$V2)] <- median(credit.Datos.Train$V2, na.rm = TRUE)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
# Imputar medianas en las columnas numéricas de credit.Datos.Train
credit.Datos.Train$V2[is.na(credit.Datos.Train$V2)] <- median(credit.Datos.Train$V2, na.rm = TRUE)
credit.Datos.Train$V14[is.na(credit.Datos.Train$V14)] <- median(credit.Datos.Train$V14, na.rm = TRUE)
# Función para calcular la moda
moda <- function(x) {
if (all(is.na(x))) return(NA)  # Manejar casos de solo NAs
names(which.max(table(x, useNA = "no")))
}
# Imputar la moda para variables categóricas
credit.Datos.Train$V1[is.na(credit.Datos.Train$V1)] <- moda(credit.Datos.Train$V1)
credit.Datos.Train$V4[is.na(credit.Datos.Train$V4)] <- moda(credit.Datos.Train$V4)
credit.Datos.Train$V5[is.na(credit.Datos.Train$V5)] <- moda(credit.Datos.Train$V5)
credit.Datos.Train$V6[is.na(credit.Datos.Train$V6)] <- moda(credit.Datos.Train$V6)
credit.Datos.Train$V7[is.na(credit.Datos.Train$V7)] <- moda(credit.Datos.Train$V7)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
# Intentar con un valor fijo de mtry
set.seed(1234)
modeloTratarDatos <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
importance=TRUE,
verbose = FALSE
)
# Ver la importancia de los predictores
print(imp)
imp <- varImp(modeloTratarDatos, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
print(modeloTratarDatos)
# Ver el modelo entrenado
print(modeloTratarDatos)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
set.seed(1234)
modeloTratarDatosV1 <- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
importance=TRUE,
verbose = FALSE
)
imp <- varImp(modeloTratarDatosV1, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
setwd("~/Escritorio/RepositorioAC/PracticaFinalAC")
credit<- read.csv("credit+approval/crx.data", header=FALSE)
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
str(credit)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
str(credit)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
library(caret)
modelLookup(("rpart"))
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
library(ggplot2)
library(gridExtra)
p1 = ggplot(data=credit,aes(sample=V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
p2 = ggplot(data=credit,aes(sample=V14)) +
ggtitle("QQ plot para V14") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
grid.arrange(p1,p2,nrow=2)
#Variables numéricas
credit.Datos.Train$V2[is.na(credit.Datos.Train$V2)] =
median(credit.Datos.Train$V2,na.rm = TRUE)
credit.Datos.Train$V14[is.na(credit.Datos.Train$V14)] =
median(credit.Datos.Train$V14,na.rm = TRUE)
#Variables categóricas
moda =
function(x) {
names(which.max(table(x, useNA = "no")))
}
credit.Datos.Train$V1[is.na(credit.Datos.Train$V1)] =
moda(credit.Datos.Train$V1)
credit.Datos.Train$V4[is.na(credit.Datos.Train$V4)] =
moda(credit.Datos.Train$V4)
credit.Datos.Train$V5[is.na(credit.Datos.Train$V5)] =
moda(credit.Datos.Train$V5)
credit.Datos.Train$V6[is.na(credit.Datos.Train$V6)] =
moda(credit.Datos.Train$V6)
credit.Datos.Train$V7[is.na(credit.Datos.Train$V7)] =
moda(credit.Datos.Train$V7)
library(rpart)
set.seed(1234)
credit.modelo.rpart.noPreProc = train(credit.Datos.Train[credit.varsEntrada],
credit.Datos.Train[[credit.varSalida]],
method='rpart',
trControl = trainControl(method = "cv", number = 5))
credit.modelo.rpart.noPreProc
#Primero debemos eliminar los outliers
eliminar_outliers = function(df, cols) {
rows_to_keep = rep(TRUE, nrow(df))
for (col in cols) {
Q1 = quantile(df[[col]], 0.25, na.rm = TRUE)
Q3 = quantile(df[[col]], 0.75, na.rm = TRUE)
InterQ = Q3 - Q1
lower_bound = Q1-1.5*InterQ
upper_bound = Q3+1.5*InterQ
rows_to_keep = rows_to_keep&(df[[col]] >= lower_bound&df[[col]]
<= upper_bound)
}
return(na.omit(df[rows_to_keep, ]))
}
numeric_cols = credit.varsEntrada[sapply(credit.Datos.Train[credit.varsEntrada],
is.numeric)]
credit.Datos.Train.Tratado = eliminar_outliers(credit.Datos.Train, numeric_cols)
#Ya hemos tratado los datos, ahora volvemos a entrenar el modelo
set.seed(1234)
credit.modelo.rpart.PreProc = train(
credit.Datos.Train.Tratado[credit.varsEntrada],
credit.Datos.Train.Tratado[[credit.varSalida]],
method = "rpart",
trControl = trainControl(method = "cv", number = 5))
credit.modelo.rpart.PreProc
pred_SinTratar = predict(credit.modelo.rpart.noPreProc,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix_SinTratar = confusionMatrix(pred_SinTratar,
credit.Datos.Test[[credit.varSalida]])
#Mostrar resultados
print(confMatrix_SinTratar)
pred_Tratado = predict(credit.modelo.rpart.PreProc,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix_Tratado = confusionMatrix(pred_Tratado,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_Tratado)
modelLookup("nnet")
credit.Datos.Train$V2[is.na(credit.Datos.Train$V2)] =
median(credit.Datos.Train$V2,na.rm = TRUE)
credit.Datos.Train$V14[is.na(credit.Datos.Train$V14)] =
median(credit.Datos.Train$V14,na.rm = TRUE)
moda =
function(x) {
names(which.max(table(x, useNA = "no")))
}
credit.Datos.Train$V1[is.na(credit.Datos.Train$V1)] =
moda(credit.Datos.Train$V1)
credit.Datos.Train$V4[is.na(credit.Datos.Train$V4)] =
moda(credit.Datos.Train$V4)
credit.Datos.Train$V5[is.na(credit.Datos.Train$V5)] =
moda(credit.Datos.Train$V5)
credit.Datos.Train$V6[is.na(credit.Datos.Train$V6)] =
moda(credit.Datos.Train$V6)
credit.Datos.Train$V7[is.na(credit.Datos.Train$V7)] =
moda(credit.Datos.Train$V7)
library(nnet)
set.seed(1234)
credit.modelo.nnet = train(
credit.Datos.Train[credit.varsEntrada],
credit.Datos.Train[[credit.varSalida]],
preProcess = c("center", "scale"),
method = "nnet",
trace = FALSE)
credit.modelo.nnet
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix_Tratado = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix_Tratado)
