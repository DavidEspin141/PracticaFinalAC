tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 35,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
size = c(1, 2, 5),  # Número de neuronas en la capa oculta
decay = c(0.001, 0.01, 0.1)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale", "knnImpute"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 55,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
size = c(1, 2, 5),  # Número de neuronas en la capa oculta
decay = c(0.001, 0.01, 0.1)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale", "knnImpute"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 30,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
size = c(1, 2, 5),  # Número de neuronas en la capa oculta
decay = c(0.001, 0.01, 0.1)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale", "knnImpute"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 20,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
size = c(1, 2, 5),  # Número de neuronas en la capa oculta
decay = c(0.001, 0.01, 0.1)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 20,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
summary(credit)
summary(credit.Datos.Train)
summary(credit.Datos.Train)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
size = c(1, 2, 5),  # Número de neuronas en la capa oculta
decay = c(0.001, 0.01, 0.1)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 20,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
size = c(1, 2, 5),  # Número de neuronas en la capa oculta
decay = c(0.001, 0.01, 0.1)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 20,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
size = c(1, 2, 5),  # Número de neuronas en la capa oculta
decay = c(0.001, 0.01, 0.1)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 30,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
size = c(1, 2, 5),  # Número de neuronas en la capa oculta
decay = c(0.001, 0.01, 0.1)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 20,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
#size = c(1, 2, 5),  # Número de neuronas en la capa oculta
size = seq(1,10,1),
decay = c(0.001, 0.01, 0.1,0.5)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 20,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
#size = c(1, 2, 5),  # Número de neuronas en la capa oculta
size = seq(1,10,1),
#decay = c(0.001, 0.01, 0.1,0.5)  # Tasa de regularización L2
decay = c(0.1, 0.3, 0.5, 1.0)
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 20,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
#size = c(1, 2, 5),  # Número de neuronas en la capa oculta
size = seq(1,15,1),
decay = c(0.001, 0.01, 0.1,0.5)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 20,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
#size = c(1, 2, 5),  # Número de neuronas en la capa oculta
size = seq(1,10,1),
decay = c(0.001, 0.01, 0.1,0.5)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 20,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
#size = c(1, 2, 5),  # Número de neuronas en la capa oculta
size = seq(1,10,1),
decay = c(0.001, 0.01, 0.1,0.5)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 50,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
#size = c(1, 2, 5),  # Número de neuronas en la capa oculta
size = seq(1,10,1),
decay = c(0.001, 0.01, 0.1,0.5)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 25,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
#size = c(1, 2, 5),  # Número de neuronas en la capa oculta
size = seq(1,10,1),
decay = c(0.001, 0.01, 0.1,0.5)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 20,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
boxplot(credit.Datos.Train$V1)
boxplot(credit.Datos.Train$V2)
boxplot(credit.Datos.Train$V14)
library(DescTools)
install.packages("DescTools")
library(DescTools)
install.packages('DescTools')
install.packages("DescTools")
```{r}
library(DescTools)
install.packages("DescTools")
remove_outliers_iqr <- function(x) {
Q1 <- quantile(x, 0.25)  # Primer cuartil
Q3 <- quantile(x, 0.75)  # Tercer cuartil
IQR <- Q3 - Q1           # Rango intercuartílico
# Identificar los valores atípicos
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Eliminar los outliers
x_clean <- x[x >= lower_bound & x <= upper_bound]
return(x_clean)
}
# Aplicar la función a una variable (por ejemplo, 'V1')
credit.Datos.Train$V2 <- remove_outliers_iqr(credit.Datos.Train$V2)
View(credit.Datos.Train_Tratar)
eliminar_outliers <- function(df, cols) {
# Iniciar vector lógico para mantener filas válidas
rows_to_keep <- rep(TRUE, nrow(df))
for (col in cols) {
Q1 <- quantile(df[[col]], 0.25, na.rm = TRUE)  # Primer cuartil
Q3 <- quantile(df[[col]], 0.75, na.rm = TRUE)  # Tercer cuartil
IQR_val <- Q3 - Q1                             # Rango intercuartílico
# Límites superior e inferior
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
# Identificar filas con valores dentro de los límites
rows_to_keep <- rows_to_keep & (df[[col]] >= lower_bound & df[[col]] <= upper_bound)
}
# Filtrar filas válidas y eliminar filas con valores NA
return(na.omit(df[rows_to_keep, ]))
}
# Identificar columnas numéricas
numeric_cols <- credit.varsEntrada[sapply(credit.Datos.Train[credit.varsEntrada], is.numeric)]
# Eliminar filas con outliers del conjunto de entrenamiento
credit.Datos.Train_Tratar <- eliminar_outliers(credit.Datos.Train, numeric_cols)
library(nnet)
library(caret)
set.seed(1234)
# Entrenando el modelo de red neuronal
tuneGrid <- expand.grid(
#size = c(1, 2, 5),  # Número de neuronas en la capa oculta
size = seq(1,10,1),
decay = c(0.001, 0.01, 0.1,0.5)  # Tasa de regularización L2
)
# Entrenando el modelo de red neuronal
credit.modelo.nnet <- train(
credit.Datos.Train_Tratar[credit.varsEntrada],    # Datos de entrada
credit.Datos.Train_Tratar[[credit.varSalida]],    # Variable de salida
preProcess = c("center", "scale"),  # Preprocesamiento de los datos
method = "nnet",                            # Usando redes neuronales
tuneGrid = tuneGrid,                        # Usando la parrilla de parámetros
maxit = 20,                               # Número máximo de iteraciones
trace = FALSE,                              # No mostrar el progreso
skip=TRUE
)
# Ver los resultados del modelo
print(credit.modelo.nnet)
#Mostrar resultados
pred_red_neuronal = predict(credit.modelo.nnet,
newdata = credit.Datos.Test[credit.varsEntrada])
confMatrix = confusionMatrix(pred_red_neuronal,
credit.Datos.Test[[credit.varSalida]])
# Mostrar resultados
print(confMatrix)
