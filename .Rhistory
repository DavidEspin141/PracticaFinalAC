#pred_SinTratarV2 <- predict(modeloSinTratarDatosV2, newdata = credit.Datos.Test[credit.varsEntrada])
#print(pred_SinTratarV2)
#set.seed(1234)
#pred_SinTratarV3 <- predict(modeloSinTratarDatosV3, newdata = credit.Datos.Test[credit.varsEntrada])
#print(pred_SinTratarV3)
#set.seed(1234)
#pred_SinTratarV4 <- predict(modeloSinTratarDatosV4, newdata = credit.Datos.Test[credit.varsEntrada])
#print(pred_SinTratarV4)
#set.seed(1234)
#pred_SinTratarV5<- predict(modeloSinTratarDatosV5, newdata = credit.Datos.Test[credit.varsEntrada])
#print(pred_SinTratarV5)
#set.seed(1234)
#pred_SinTratarV6<- predict(modeloSinTratarDatosV6, newdata = credit.Datos.Test[credit.varsEntrada])
#print(pred_SinTratarV6)
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinTratar1 <- confusionMatrix(pred_SinTratarV1, credit.Datos.Test[[credit.varSalida]])
#confMatrix_SinTratar2 <- confusionMatrix(pred_SinTratarV2, credit.Datos.Test[[credit.varSalida]])
#confMatrix_SinTratar3 <- confusionMatrix(pred_SinTratarV3, credit.Datos.Test[[credit.varSalida]])
#confMatrix_SinTratar4 <- confusionMatrix(pred_SinTratarV4, credit.Datos.Test[[credit.varSalida]])
#confMatrix_SinTratar5 <- confusionMatrix(pred_SinTratarV5, credit.Datos.Test[[credit.varSalida]])
#confMatrix_SinTratar6 <- confusionMatrix(pred_SinTratarV6, credit.Datos.Test[[credit.varSalida]])
# Predicciones para el modelo con tratamiento
set.seed(1234)
pred_TratarV1 <- predict(modeloTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
set.seed(1234)
pred_SinTratarV1 <- predict(modeloSinTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV1)
confMatrix_SinTratar1 <- confusionMatrix(pred_SinTratarV1, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_SinTratar1)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:15)
modeloSinTratarDatosV1<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
ntree=100,
importance=TRUE,
verbose = FALSE
)
####################################
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV1, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
set.seed(1234)
pred_SinTratarV1 <- predict(modeloSinTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV1)
confMatrix_SinTratar1 <- confusionMatrix(pred_SinTratarV1, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_SinTratar1)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:15)
modeloSinTratarDatosV1<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
ntree=150,
importance=TRUE,
verbose = FALSE
)
####################################
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV1, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
confMatrix_SinTratar1 <- confusionMatrix(pred_SinTratarV1, credit.Datos.Test[[credit.varSalida]])
# Predicciones para el modelos sin tratamiento
set.seed(1234)
pred_SinTratarV1 <- predict(modeloSinTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV1)
#Nota: hay que cargar los datos de forma correcta
# Predicciones para el modelos sin tratamiento
set.seed(1234)
pred_SinTratarV1 <- predict(modeloSinTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV1)
#set.seed(1234)
#pred_SinTratarV2 <- predict(modeloSinTratarDatosV2, newdata = credit.Datos.Test[credit.varsEntrada])
#print(pred_SinTratarV2)
#set.seed(1234)
#pred_SinTratarV3 <- predict(modeloSinTratarDatosV3, newdata = credit.Datos.Test[credit.varsEntrada])
#print(pred_SinTratarV3)
#set.seed(1234)
#pred_SinTratarV4 <- predict(modeloSinTratarDatosV4, newdata = credit.Datos.Test[credit.varsEntrada])
#print(pred_SinTratarV4)
#set.seed(1234)
#pred_SinTratarV5<- predict(modeloSinTratarDatosV5, newdata = credit.Datos.Test[credit.varsEntrada])
#print(pred_SinTratarV5)
#set.seed(1234)
#pred_SinTratarV6<- predict(modeloSinTratarDatosV6, newdata = credit.Datos.Test[credit.varsEntrada])
#print(pred_SinTratarV6)
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinTratar1 <- confusionMatrix(pred_SinTratarV1, credit.Datos.Test[[credit.varSalida]])
#confMatrix_SinTratar2 <- confusionMatrix(pred_SinTratarV2, credit.Datos.Test[[credit.varSalida]])
#confMatrix_SinTratar3 <- confusionMatrix(pred_SinTratarV3, credit.Datos.Test[[credit.varSalida]])
#confMatrix_SinTratar4 <- confusionMatrix(pred_SinTratarV4, credit.Datos.Test[[credit.varSalida]])
#confMatrix_SinTratar5 <- confusionMatrix(pred_SinTratarV5, credit.Datos.Test[[credit.varSalida]])
#confMatrix_SinTratar6 <- confusionMatrix(pred_SinTratarV6, credit.Datos.Test[[credit.varSalida]])
# Predicciones para el modelo con tratamiento
set.seed(1234)
pred_TratarV1 <- predict(modeloTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
set.seed(1234)
pred_SinTratarV1 <- predict(modeloSinTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV1)
confMatrix_SinTratar1 <- confusionMatrix(pred_SinTratarV1, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_SinTratar1)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:15)
modeloSinTratarDatosV1<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
ntree=300,
importance=TRUE,
verbose = FALSE
)
####################################
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV1, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
# Predicciones para el modelos sin tratamiento
set.seed(1234)
pred_SinTratarV1 <- predict(modeloSinTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV1)
confMatrix_SinTratar1 <- confusionMatrix(pred_SinTratarV1, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_SinTratar1)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:15)
modeloSinTratarDatosV1<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
ntree=250,
importance=TRUE,
verbose = FALSE
)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:15)
modeloSinTratarDatosV1<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
ntree=250,
importance=TRUE,
verbose = FALSE
)
####################################
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV1, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
set.seed(1234)
pred_SinTratarV1 <- predict(modeloSinTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV1)
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinTratar1 <- confusionMatrix(pred_SinTratarV1, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_SinTratar1)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:15)
modeloSinTratarDatosV1<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
ntree=190,
importance=TRUE,
verbose = FALSE
)
####################################
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV1, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
# Predicciones para el modelos sin tratamiento
set.seed(1234)
pred_SinTratarV1 <- predict(modeloSinTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV1)
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinTratar1 <- confusionMatrix(pred_SinTratarV1, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_SinTratar1)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:15)
modeloSinTratarDatosV1<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
ntree=190,
importance=TRUE,
verbose = FALSE
)
####################################
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV1, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
set.seed(1234)
pred_SinTratarV1 <- predict(modeloSinTratarDatosV1, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV1)
# Evaluar desempeño en el conjunto de prueba
confMatrix_SinTratar1 <- confusionMatrix(pred_SinTratarV1, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_SinTratar1)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
set.seed(1234)
modeloSinTratarDatosV2<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
ntree=200,
importance=TRUE,
verbose = FALSE
)
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV2, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
set.seed(1234)
pred_SinTratarV2 <- predict(modeloSinTratarDatosV2, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV2)
confMatrix_SinTratar2 <- confusionMatrix(pred_SinTratarV2, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_SinTratar2)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
# Intentar con un valor fijo de mtry
set.seed(1234)
modeloSinTratarDatosV2<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
ntree=1000,
importance=TRUE,
verbose = FALSE
)
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV2, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
set.seed(1234)
pred_SinTratarV2 <- predict(modeloSinTratarDatosV2, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV2)
confMatrix_SinTratar2 <- confusionMatrix(pred_SinTratarV2, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_SinTratar2)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
set.seed(1234)
modeloSinTratarDatosV2<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
ntree=1000,
importance=TRUE,
verbose = FALSE
)
```{r}
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
set.seed(1234)
modeloSinTratarDatosV2<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
ntree=1000,
importance=TRUE,
verbose = FALSE
)
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV2, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
###################################
set.seed(1234)
rf.tunegrid <- expand.grid(mtry = 1:15)
modeloSinTratarDatosV1<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid=rf.tunegrid,
ntree=190,
importance=TRUE,
verbose = FALSE
)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
set.seed(1234)
modeloSinTratarDatosV2<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
importance=TRUE,
verbose = FALSE
)
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV2, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
set.seed(1234)
pred_SinTratarV2 <- predict(modeloSinTratarDatosV2, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV2)
confMatrix_SinTratar2 <- confusionMatrix(pred_SinTratarV2, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_SinTratar2)
rm(list = ls())
credit<- read.csv("credit+approval/crx.data", header=FALSE,na.strings = "?")
credit.trainIdx<-readRDS("credit.trainIdx.rds")
categoricos_col<-c("V1","V4","V5","V6","V7","V9","V10","V12","V13","V16")
credit[categoricos_col]<-lapply(credit[categoricos_col],FUN = as.factor)
levels(credit$V4)<-c(levels(credit$V4),"t")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Test)
credit.varSalida = c("V16")
credit.varsEntrada = setdiff(names(credit), credit.varSalida)
credit.Datos.Train <- na.omit(credit.Datos.Train)
library(randomForest)
library(caret)
set.seed(1234)
modeloSinTratarDatosV2<- train(
x = credit.Datos.Train[credit.varsEntrada],
y = credit.Datos.Train[[credit.varSalida]],
method = "rf",
trControl = trainControl(method = "cv", number = 5),
importance=TRUE,
ntree=1500,
verbose = FALSE
)
# Obtener la importancia de los predictores
imp <- varImp(modeloSinTratarDatosV2, scale = FALSE)
# Ver la importancia de los predictores
print(imp)
# Graficar la importancia de los predictores
plot(imp)
set.seed(1234)
pred_SinTratarV2 <- predict(modeloSinTratarDatosV2, newdata = credit.Datos.Test[credit.varsEntrada])
print(pred_SinTratarV2)
confMatrix_SinTratar2 <- confusionMatrix(pred_SinTratarV2, credit.Datos.Test[[credit.varSalida]])
print(confMatrix_SinTratar2)
setwd("~/Escritorio/RepositorioAC/PracticaFinalAC")
